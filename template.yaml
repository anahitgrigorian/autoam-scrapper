AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  auto.am scrapper

  The project is aimed to scrape car data from https://auto.am/.

Parameters:
  AutoAMAddress:
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to deploy into

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs to assign to the database and Lambda

Globals:
  Function:
    Timeout: 120
    MemorySize: 128

Resources:
  OrchestratorStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: src/state-machine/orchestrator.yaml
      DefinitionSubstitutions:
        CheckPagesScrappedArn: !GetAtt CheckPagesScrappedFunction.Arn
        GetPagesArn: !GetAtt GetPagesFunction.Arn
        PageScrapperArn: !GetAtt PageScrapperFunction.Arn
        ProcessNewListingsArn: !GetAtt ProcessNewListingsFunction.Arn
        SetPagesScrappedArn: !GetAtt SetPagesScrappedFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckPagesScrappedFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetPagesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PageScrapperFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ProcessNewListingsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SetPagesScrappedFunction
      Events:
        ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "cron(0 0 ? * * *)"
      
  ScrapperLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  CheckPagesScrappedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/check-pages-scrapped/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - ssm:*
            Resource: "*"
      Architectures:
        - x86_64

  ProcessNewListingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/process-new-listings/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - sqs:*
            Resource: "*"
      Environment:
        Variables:
          AUTOAM_IP_ADDRESS: !Ref AutoAMAddress
      Layers:
      - !Ref ScrapperLayer

  GetPagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-pages/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          AUTOAM_IP_ADDRESS: !Ref AutoAMAddress
      Layers:
      - !Ref ScrapperLayer

  PageScrapperFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/page-scrapper/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref ScrappedURLsQueue
          AUTOAM_IP_ADDRESS: !Ref AutoAMAddress
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - sqs:*
            Resource: "*"
      Layers:
      - !Ref ScrapperLayer

  SetPagesScrappedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/set-pages-scrapped/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - ssm:*
            Resource: "*"
      Architectures:
        - x86_64

  WarehouseProvisioner:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/warehouse-provisioner/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:*
            Resource: "*"
      Architectures:
        - x86_64
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref ScrappedURLsQueue
          AUTOAM_IP_ADDRESS: !Ref AutoAMAddress
          RDS_ENDPOINT: !GetAtt RDSDatabase.Endpoint.Address
          RDS_PORT: !GetAtt RDSDatabase.Endpoint.Port
          RDS_DATABASE_NAME: autoam
          RDS_SECRET_ARN: !Ref RDSSecret
      Layers:
      - !Ref ScrapperLayer
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
                - ScrappedURLsQueue
                - Arn

  ScrappedURLsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ScrappedUrls
      VisibilityTimeout: 60
      
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "RDS DB security group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0

  RDSSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "Subnet Group for RDS database"
      SubnetIds: !Ref SubnetIds

  RDSDatabase:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSSecret
    Properties:
      AllocatedStorage: 20
      DBInstanceIdentifier: autoam
      Engine: postgres
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for my RDS instance'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  RDSInitLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            }
          }]
        }
      Policies:
        - PolicyName: !Sub RDSInitLambdaFunctionPolicy
          PolicyDocument: |
            {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction",
                    "ec2:*",
                    "logs:*",
                    "secretsmanager:*"
                  ],
                  "Resource": "*"
                }
              ]
            }

  RDSInitLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt RDSInitLambdaRole.Arn
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: ./src/init-database/
      Environment:
        Variables:
          RDS_ENDPOINT: !GetAtt RDSDatabase.Endpoint.Address
          RDS_PORT: !GetAtt RDSDatabase.Endpoint.Port
          RDS_DATABASE_NAME: autoam
          RDS_SECRET_ARN: !Ref RDSSecret
      Layers:
      - !Ref ScrapperLayer

  RDSDatabaseCustomResource:
    Type: 'Custom::RDSDatabaseResource'
    DependsOn:
      - RDSSecret
    Properties: 
      ServiceToken: !GetAtt RDSInitLambdaFunction.Arn
      StackName: !Ref "AWS::StackName"
      RdsProperties:
        EndpointAddress: !GetAtt RDSDatabase.Endpoint.Address
        SecretARN: !Ref RDSSecret
        Execute:
          - DatabaseName: "postgres"
            Scripts:
              - 'CREATE DATABASE "autoam";'
          - DatabaseName: "autoam"
            Scripts:
              - 'CREATE TABLE public.cars_raw_data (
                  listing_id int4 NOT NULL,
                  "year" int4 NULL,
                  make varchar(255) NULL,
                  model varchar(255) NULL,
                  vin varchar(255) NULL,
                  is_negotiable bool NULL,
                  is_urgent bool NULL,
                  is_exchangable bool NULL,
                  pay_with_installments bool NULL,
                  insert_date date NULL,
                  "location" varchar(255) NULL,
                  price int4 NULL,
                  seller_id int4 NULL,
                  details jsonb NULL,
                  "options" text NULL,
                  created_at timestamptz NOT NULL DEFAULT now(),
                  CONSTRAINT cars_raw_data_pkey PRIMARY KEY (listing_id)
                );'
        DatabaseUsers:
          - Name: analytics
            SecretId: "analytics-users"
            Grants:
              - Database: postgres
                Permissions: CONNECT
              - Database: autoam
                Permissions: ALL PRIVILEGES
  